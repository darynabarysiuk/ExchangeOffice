// <auto-generated />
using System;
using ExchangeOffice.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExchangeOffice.Repositories.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211204072328_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExchangeOffice.Entities.СurrencyLimit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<double>("Limit")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID")
                        .IsUnique();

                    b.ToTable("СurrencyLimits");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.Casher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Cashers");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Сurrencies");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.CurrencyRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CurrencyIDFrom")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyIDTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyIDFrom");

                    b.HasIndex("CurrencyIDTo");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.OperationHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CurrencyRateID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyRateID");

                    b.ToTable("OperationHistories");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.СurrencyLimit", b =>
                {
                    b.HasOne("ExchangeOffice.Entities.Currency", "Сurrency")
                        .WithOne("СurrencyLimit")
                        .HasForeignKey("ExchangeOffice.Entities.СurrencyLimit", "CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Сurrency");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.CurrencyRate", b =>
                {
                    b.HasOne("ExchangeOffice.Entities.Currency", "CurrencyFrom")
                        .WithMany("CurrencyRateFrom")
                        .HasForeignKey("CurrencyIDFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExchangeOffice.Entities.Currency", "CurrencyTo")
                        .WithMany("CurrencyRateTo")
                        .HasForeignKey("CurrencyIDTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrencyFrom");

                    b.Navigation("CurrencyTo");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.OperationHistory", b =>
                {
                    b.HasOne("ExchangeOffice.Entities.CurrencyRate", "CurrencyRate")
                        .WithMany("OperationHistories")
                        .HasForeignKey("CurrencyRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyRate");
                });

            modelBuilder.Entity("ExchangeOffice.Entities.Currency", b =>
                {
                    b.Navigation("CurrencyRateFrom");

                    b.Navigation("CurrencyRateTo");

                    b.Navigation("СurrencyLimit")
                        .IsRequired();
                });

            modelBuilder.Entity("ExchangeOffice.Entities.CurrencyRate", b =>
                {
                    b.Navigation("OperationHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
